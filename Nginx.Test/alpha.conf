worker_processes 2;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;

  sendfile on;
  client_max_body_size 5M;
  # Temporary patch while we have large JWT cookie issues
  large_client_header_buffers 4 32k;

  gzip on;
  gzip_min_length 256;
  gzip_buffers 4 32k;
  gzip_proxied any;
  gzip_types text/plain application/javascript application/x-javascript application/json text/javascript text/xml text/css image/svg+xml;
  gzip_comp_level 6;
  gzip_vary on;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";

#  ssl_buffer_size 1024;

  upstream app_servers {
    server arcoservice:5000;
  }

  upstream app_dockermonitor {
    server dockermonitor:5001;
  }

  upstream app_identity {
    server identity:5009;
  }

  upstream app_elasticsearch {
    server elasticsearch:9200;
    keepalive 15;
  }

  upstream app_kibana {
    server kibana:5601;
    keepalive 15;
  }

  upstream app_pushy {
    server gateway_pushy:7020;
  }

  upstream app_s1000 {
    server gateway_s1000:7016;
  }

  upstream app_videoservice {
    server videoservice:8082;
  }

  upstream app_sip {
    server gateway_sip:7060;
  }

  upstream app_sbs {
    server gateway_sbs:7021;
  }

  upstream app_redis_commander {
    server redis-commander:8081;
  }

  
  #
  # Arco UI
  #

  server {
    listen 80;
#    listen [::]:80;

    server_name alpha.spgcontrols.com;

    # Redirect all traffic to HTTPS
    return 301 https://$server_name$request_uri;
  }


  server {
    listen 443 ssl;

#    error_log /dev/stdout debug;

    server_name alpha.spgcontrols.com;
# TODO: Parser cannot handle this next line!!!
    #set $dashboard "https://${server_name}/dashboard";

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;
    ssl_session_cache shared:SSL:150m;
    ssl_prefer_server_ciphers on;

#    add_header 'Access-Control-Allow-Origin' '*';
#    add_header 'Access-Control-Allow-Credentials' 'true';
#    add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
#    add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';

    location /identity {
      proxy_pass         http://app_identity;
      proxy_redirect     off;
      proxy_set_header   Host $http_host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
      proxy_set_header   X-Forwarded-Proto $scheme;
      proxy_set_header   X-NginX-Proxy true;
    }

    location /installer {
      proxy_pass         http://app_dockermonitor;
      proxy_redirect     off;
      proxy_set_header   Host $http_host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
      proxy_set_header   X-Forwarded-Proto $scheme;
      proxy_set_header   X-NginX-Proxy true;
    }

    location /api/swarm {
      proxy_pass         http://app_dockermonitor;
      proxy_redirect     off;
      proxy_set_header   Host $http_host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
      proxy_set_header   X-NginX-Proxy true;
    }

    location /api/install {
      proxy_pass         http://app_dockermonitor;
      proxy_redirect     off;
      proxy_set_header   Host $http_host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
      proxy_set_header   X-NginX-Proxy true;
    }

    location /api {
      proxy_pass         http://app_servers;
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
    }

    location /api/alarmhub {
      proxy_pass                 http://app_servers;
      proxy_http_version 1.1;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection "Upgrade";
      proxy_set_header   Host $host;
      proxy_cache_bypass $http_upgrade;
    }

    location /api/actionhub {
      proxy_pass                 http://app_servers;
      proxy_http_version 1.1;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection "Upgrade";
      proxy_set_header   Host $host;
      proxy_cache_bypass $http_upgrade;
    }

    location /api/statushub {
      proxy_pass                 http://app_servers;
      proxy_http_version 1.1;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection "Upgrade";
      proxy_set_header   Host $host;
      proxy_cache_bypass $http_upgrade;
    }

    location /api/changehub {
      proxy_pass                 http://app_servers;
      proxy_http_version 1.1;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection "Upgrade";
      proxy_set_header   Host $host;
      proxy_cache_bypass $http_upgrade;
    }

     location /api/updateshub {
      proxy_pass                 http://app_dockermonitor;
      proxy_http_version 1.1;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection "Upgrade";
      proxy_set_header   Host $host;
      proxy_cache_bypass $http_upgrade;
    }

    location /api/gateway/pushy {
      proxy_pass         http://app_pushy;
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
    }

    location /api/gateway/sbs {
      proxy_pass         http://app_sbs;
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
    }

    location /api/gateway/s1000 {
      proxy_pass         http://app_s1000;
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
    }

    location /api/gateway/sip {
      proxy_pass         http://app_sip;
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
    }

    location /api/video {
      proxy_pass http://app_videoservice;
      proxy_redirect off;
      proxy_buffering off;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
    }

# TODO: Parse cannot handle this next block!!!
#        location /app/kibana {
##    valid_referers none blocked server_names ~.spgcontrols.com;
##     if ($invalid_referer) {
##       return 403;
##     }

##     add_header X-debug-message $http_referer always;
##     if ($http_referer != "https://alpha.spgcontrols.com/dashboard") {
##       return 403;
##     }
#
#     add_header X-debug-message $dashboard always;
#      if ($http_referer != $dashboard) {
#        return 403;
#      }
#
#      proxy_pass         http://app_kibana;
#      proxy_redirect     off;
#    }

    location /ui {
      proxy_pass         http://app_kibana;
      proxy_redirect     off;
    }

    location /bundles {
      proxy_pass         http://app_kibana;
      proxy_redirect     off;
    }

    location /plugins {
      proxy_pass         http://app_kibana;
      proxy_redirect     off;
    }

    location /api/saved_objects {
      proxy_pass         http://app_kibana;
      proxy_redirect     off;
    }

    location /api/console/api_server {
      proxy_pass         http://app_kibana;
      proxy_redirect     off;
    }

    location /elasticsearch/_msearch {
      proxy_pass         http://app_kibana;
      proxy_redirect     off;
    }

    # serve static files
    # TODO: Parse cannot handle an extra space between / {
    location / {
      try_files $uri /index.html;

      root    /usr/share/nginx/html;
      expires 1d;
    }
  }


  #
  # ARCO Core
  #

  server {
    listen 5000;

    location /api/swarm {
      proxy_pass         http://dockermonitor:5001;
    }

    location /api {
      proxy_pass         http://app_servers;
    }
  }


  #
  # S1000 Gateway
  #

  server {
    listen 80;

    server_name s1000alpha.spgcontrols.com;

    location / {
      proxy_pass         http://gateway_s1000:7016;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
    }
  }

  server {
    listen 7017;

    error_log /dev/stdout debug;
#    access_log /dev/stdout debug;


    location / {
      proxy_pass         http://gateway_s1000:7016;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
    }
  }

  server {
    listen 7016 ssl;

    keepalive_timeout 5m;

    error_log /dev/stdout debug;

    ssl_certificate "/etc/nginx/ssl/server-cert.pem";
    ssl_certificate_key "/etc/nginx/ssl/server-key.pem";

    ssl_protocols TLSv1.2;
#    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256;
#    ssl_prefer_server_ciphers on;

    ssl_session_timeout 50m;
    ssl_session_cache none;
    # ssl_session_cache shared:SSL:150m;
    proxy_ssl_session_reuse off;

    ssl_buffer_size 1k;

    proxy_connect_timeout 7d;
    proxy_send_timeout 7d;
    proxy_read_timeout 7d;

    # client certificate
    # TODO: Use different crt
    # ssl_client_certificate "/etc/nginx/ssl/all.pem";
    # proxy_ssl_verify off;
    # ssl_trusted_certificate "/etc/nginx/ssl/all.pem";
    # ssl_client_certificate "/etc/nginx/ssl/ca-client-cert.pem";
    # ssl_verify_client on;
    # ssl_verify_depth 2;
    # make verification optional, so we can display a 403 message to those who fail authentication
    # ssl_verify_client optional;

    location / {
      proxy_pass         http://gateway_s1000:7016;
      proxy_buffering off;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
    }
  }


  #
  # Elastic Search / Kibana
  #

  server {
    listen 8881;

    location / {
      auth_basic           "Protected Elasticsearch";
      auth_basic_user_file /opt/elk/.espasswd;

      proxy_pass http://app_elasticsearch;
      proxy_redirect off;
      proxy_buffering off;

      proxy_http_version 1.1;
      proxy_set_header Connection "Keep-Alive";
      proxy_set_header Proxy-Connection "Keep-Alive";
    }
  }

   server {
    listen 58081;

    location / {
      auth_basic           "Protected Elasticsearch";
      auth_basic_user_file /opt/elk/.espasswd;

      proxy_pass http://app_redis_commander;
      proxy_redirect off;
      proxy_buffering off;

      proxy_http_version 1.1;
      proxy_set_header Connection "Keep-Alive";
      proxy_set_header Proxy-Connection "Keep-Alive";
    }
  }


  server {
    listen 8882 ssl;

    server_name alpha.spgcontrols.com;
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;
    ssl_session_cache shared:SSL:150m;
    ssl_prefer_server_ciphers on;

    location / {

      auth_basic           "Protected Kibana";
      auth_basic_user_file /opt/elk/.espasswd;

      proxy_pass http://app_kibana;
      proxy_redirect off;
      proxy_buffering off;

      proxy_http_version 1.1;
      proxy_set_header Connection "Keep-Alive";
      proxy_set_header Proxy-Connection "Keep-Alive";
    }
  }

  proxy_send_timeout 180s;
  proxy_read_timeout 180s;
  fastcgi_send_timeout 180s;
  fastcgi_read_timeout 180s;
}
